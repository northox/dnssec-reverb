#!/bin/sh
# dnssec-reverb: DNSSEC key management tool
#
# @home: https://github.com/northox/dnssec-reverb
# @license: Simplified BSD
# Copyright (c) 2017-2020 Danny Fullerton <danny@mantor.org>. 
# Copyright (c) 2018 Juuso "Linda" Lapinlampi <linda@lindalap.fi>. 
# Copyright (c) 2009-2013 Kazunori Fujiwara <fujiwara@wide.ad.jp>.

PROG=$(basename "$0")
DIR=$(dirname "$0")
KEYGEN_CMD="$(which ldns-keygen)"
SIGNZONE_CMD="$(which ldns-signzone)"
KEY2DS_CMD="$(which ldns-key2ds)"
CHECKZONE_CMD="$(which nsd-checkzone)"
CONTROL_CMD="$(which nsd-control)"
RELOAD_CMD="(echo -n 'reload is '; $CONTROL_CMD reload) && (echo -n 'notify is '; $CONTROL_CMD notify)"
KSK_PARAM="-a ECDSAP256SHA256 -k"
ZSK_PARAM="-a ECDSAP256SHA256"
SIGN_PARAM="-n" # -n = use NSEC3
DS_HASH="2" # 1=SHA1 2=SHA256 3=GOST 4=SHA384
DS_PARAM="-$DS_HASH"
EXPIRE_DAYS="33"
SERIAL_TAG="_SERIAL_"

NOW=$(date +%Y%m%d%H%M%S)
UTIME=$(date +%s)
EXPIRE=$(echo "$UTIME + ($EXPIRE_DAYS*24*60*60)" | bc)
LOCKF=""

Fatal()
{
	[ "$LOCKF" != "" ] && rm $LOCKF
	echo "$PROG: $1" >&2
	exit 1
}

if [ $(id -u) != 0 ]; then
	Fatal "Must be root"
fi


# load conf
CONF="dnssec-reverb.conf"
if [ -r "$DNSSEC_REVERB_CONF/$CONF" ]; then
	CONF="$DNSSEC_REVERB_CONF/$CONF"
elif [ -r "$DIR/$CONF" ]; then
	CONF="${DIR}/$CONF"
elif [ -r "/etc/$CONF" ]; then
	CONF="/etc/$CONF"
elif [ -r "/usr/local/etc/$CONF" ]; then
	CONF="/usr/local/etc/$CONF"
else
	Fatal "Can't find config file"
fi
. "$CONF"

# bind - expire format: now +N seconds
if [[ $signzone = *'dnssec-signzone' ]]; then
  EXPIRE=$(echo "+`echo "(${EXPIRE_DAYS:-$DEFAULT_EXPIRE}*24*60*60)" | bc`")
fi
# nsd - expire format: timestamp
if [[ $signzone = *'ldns-signzone' ]]; then
  EXPIRE=$(echo "`date +%s` + (${EXPIRE_DAYS:-$DEFAULT_EXPIRE}*24*60*60)" | bc)
fi

# defaults
[ "$KEYGEN_CMD" = "" ] && Fatal "Can't find \$KEYZONE_CMD"
[ "$SIGNZONE_CMD" = "" ] && Fatal "Can't find \$SIGNZONE_CMD"
[ "$KEY2DS_CMD" = "" ] && Fatal "Can't find \$KEY2DS_CMD"
[ "$CHECKZONE_CMD" = "" ] && Fatal "Can't find \$CHECKZONE_CMD"
[ "$CONTROL_CMD" = "" ] && Fatal "Can't find \$CONTROL_CMD"
[ "$MASTERDIR" = "" ] && Fatal "\$MASTERDIR not set"
[ -d "$MASTERDIR" ] || Fatal "\$MASTERDIR not a directory ($MASTERDIR)"
[ "$DBDIR" = "" ] && DBDIR="$MASTERDIR/dnssec-reverb-db"
[ "$KEYDIR" = "" ] && KEYDIR="$DBDIR/keydir"
[ "$KEYBACKUPDIR" = "" ] && KEYBACKUPDIR="$DBDIR/backup"
[ "$SERIALDIR" = "" ] && SERIALDIR="$DBDIR/serial"
[ "$DSDIR" = "" ] && DSDIR="$DBDIR/ds"
ZSK_CUR_PREFIX="zsk-" # current zsk
KSK_CUR_PREFIX="ksk-" # current ksk
ZSK_NEW_PREFIX="zss-" # new zsk
KSK_NEW_PREFIX="kss-" # new ksk
ZSK_OLD_PREFIX="zsr-" # removed zsk

# setup
[ ! -d "$DBDIR" ] && mkdir -p "$DBDIR"
[ ! -d "$KEYBACKUPDIR" ] && mkdir -p "$KEYBACKUPDIR"
[ ! -d "$KEYDIR" ] && mkdir -p "$KEYDIR"
[ ! -d "$SERIALDIR" ] && mkdir -p "$SERIALDIR"
[ ! -d "$DSDIR" ] && mkdir -p "$DSDIR"

cd "$MASTERDIR" || Fatal "Can't change directory to \$MASTERDIR"

_check_file()
{
	while [ "$1" != "" ]; do
		[ ! -s "$1" ] && Fatal "$1 does not exist."
		shift
	done
}

_check_nofile()
{
	while [ "$1" != "" ]; do
		[ -f "$1" ] && Fatal "$1 exist."
		shift
	done
}

_usage()
{
	[ "$LOCKF" != "" ] && rm $LOCKF
	cat <<EOF
usage: $PROG keygen <zone>
       $PROG rmkeys <zone>
       $PROG [-s] ksk-add <zone>
       $PROG [-s] ksk-roll <zone>
       $PROG [-s] zsk-add <zone>
       $PROG [-s] zsk-roll <zone>
       $PROG [-s] zsk-rmold <zone>
       $PROG sign <zone>
       $PROG status <zone>
EOF
	exit 1
}

sign()
{
	_check_file "$ZONEFILE" "$KSK_CUR_FILE" "$ZSK_CUR_FILE"
	KSK=$(head -1 "$KSK_CUR_FILE")
	ZSK=$(head -1 "$ZSK_CUR_FILE")
	KSS=""
	[ -s "$KSK_NEW_FILE" ] && KSS=$(head -1 "$KSK_NEW_FILE")
	_check_file "$KEYDIR/$KSK.private" "$KEYDIR/$ZSK.private"
	LASTSERIAL=0
	[ -f "$SERIAL_FILE" ] && LASTSERIAL=$(cat "$SERIAL_FILE")
	LASTDATE=$(echo "$LASTSERIAL" | sed 's/..$//')
	DATE=$(date +%Y%m%d)
	if [ "$LASTDATE" = "$DATE" ]; then
		SERIAL=$(( $LASTSERIAL + 1 ))
		echo "$SERIAL" > "$SERIAL_FILE"
 	else
		SERIAL=$(date +%Y%m%d00)
		echo "$SERIAL" > "$SERIAL_FILE"
	fi

	ZONE_PREPROCESS="sed s/$SERIAL_TAG/$SERIAL/"
	$ZONE_PREPROCESS "$ZONEFILE" > "$ZONEFILE.tmp"

	cat "$KSK_CUR_FILE" "$ZSK_CUR_FILE" | while read -r keyfile
	do
		_check_file "$KEYDIR/$keyfile.key"
		cat "$KEYDIR/$keyfile.key" >> "$ZONEFILE.tmp"
	done
	for i in $KSK_NEW_FILE $ZSK_NEW_FILE $ZSK_OLD_FILE
	do
		if [ -s "$i" ]; then
			keyfile=$(head -1 "$i")
			_check_file "$KEYDIR/$keyfile.key"
			cat "$KEYDIR/$keyfile.key" >> "$ZONEFILE.tmp"
		fi
	done
	[ "$KSS" != "" ] && KSS="$KEYDIR/$KSS"
	$SIGNZONE_CMD "$_SIGN_PARAM" -e "$EXPIRE" -o "$ZONE" -f "$ZONEFILE.signed" "$ZONEFILE.tmp" "$KEYDIR/$ZSK" "$KEYDIR/$KSK" $KSS || Fatal "Failed to sign zone" && $CHECKZONE_CMD $ZONE $ZONE
	rm "$ZONEFILE.tmp"
	eval "$RELOAD_CMD"
}

status()
{
	_check_file "$KSK_CUR_FILE" "$ZSK_CUR_FILE"
	echo $ZONE
	echo " type state  id    algo hash (digest)"
	$KEY2DS_CMD -n "$_DS_PARAM" "$KEYDIR/$(cat "$KSK_CUR_FILE").key" | \
		awk {'printf (" KSK  active %5s %2s   %1s    %s\n", $5, $6, $7, $8)'}
	if [ -f "$KSK_NEW_FILE" ]; then
		$KEY2DS_CMD -n "$_DS_PARAM" "$KEYDIR/$(cat "$KSK_NEW_FILE").key" | \
		  awk {'printf ("      next   %5s %3s  %1s %s\n", $5, $6, $7, $8)'}
	fi
	awk {'split($0,a,"+"); gsub(/^0/, "", a[2]);
	      printf (" ZSK  active %5s %2s   %1s\n", a[3], a[2], "'$DS_HASH'")'} "$ZSK_CUR_FILE"
	if [ -f "$ZSK_NEW_FILE" ]; then
		awk {'split($0,a,"+"); gsub(/^0/, "", a[2]);
	              printf ("      next   %5s %2s   %1s\n", a[3], a[2], "'$DS_HASH'")'} "$ZSK_NEW_FILE"
	fi
	if [ -f "$ZSK_OLD_FILE" ]; then
		awk {'split($0,a,"+"); gsub(/^0/, "", a[2]);
		      printf ("      old    %5s %2s   %1s\n", a[3], a[2], "'$DS_HASH'")'} "$ZSK_OLD_FILE"
	fi
}

keygen()
{
	cd "$KEYDIR" || Fatal "Can't change directory to \$KEYDIR"
	newfile="$3"
	tmpfile="$3.tmp"
	_KEY=$($KEYGEN_CMD $1 "$2") || Fatal "'$KEYGEN_CMD $1 \"$2\"' failed with $?"
	[ -f "$_KEY.ds" ] && rm "$_KEY.ds"
	if [ ! -s "$_KEY.key" ]; then
		rm "$_KEY.key"
		Fatal "cannot write new key: $1 $2 $3"
	fi
	echo "$_KEY" > "$tmpfile"
	read -r "_KEY2" < "$tmpfile"
	if [ "$_KEY" != "$_KEY2" ]; then
		rm "$tmpfile"
		rm "$_KEY.key"
		Fatal "cannot write $tmpfile"
	fi
	mv "$tmpfile" "$newfile"
	cd "$MASTERDIR" || Fatal "Can't change directory to \$MASTERDIR"
}

backupkeys()
{
	while [ "$1" != "" ]; do
		if [ -f "$1" ]; then
			KEY=$(head -1 "$1")
			if [ -f "$KEYDIR/$KEY.key" ]; then
				mv "$KEYDIR/$KEY.key" "$KEYDIR/$KEY.private" "$KEYBACKUPDIR/"
			fi
		fi
		shift
	done
}

# Process command line
if [ "$1" = "" ] || [ "$1" = "-h" ] || [ "$1" = "-?" ] || [ "$1" = "--help" ]; then
	_usage
elif [ "$1" = "-s" ] || [ "$1" = "--sign" ];then
	SIGN_OPT=1
	if [ $# -gt 2 ]; then
		shift
	fi
fi

CMD="$1"
shift

if [ "$1" = "" ]; then
	Fatal "A zone must be provided."
else
	ZONELIST="$*"
fi

for ZONE in $ZONELIST
do
	TMPF="$DBDIR/$ZONE.$$"
	KSK_CUR_FILE="$KEYDIR/$KSK_CUR_PREFIX$ZONE"
	ZSK_CUR_FILE="$KEYDIR/$ZSK_CUR_PREFIX$ZONE"
	KSK_NEW_FILE="$KEYDIR/$KSK_NEW_PREFIX$ZONE"
	ZSK_NEW_FILE="$KEYDIR/$ZSK_NEW_PREFIX$ZONE"
	ZSK_OLD_FILE="$KEYDIR/$ZSK_OLD_PREFIX$ZONE"
	SERIAL_FILE="$SERIALDIR/$ZONE"
	ZONEFILE="$MASTERDIR/$ZONE"
	ZONE_=$(echo "$ZONE" | tr .- __)
	eval _SIGN_PARAM=\${SIGN_PARAM_"$ZONE_":-"$SIGN_PARAM"}
	eval _KSK_PARAM=\${KSK_PARAM_"$ZONE_":-"$KSK_PARAM"}
	eval _ZSK_PARAM=\${ZSK_PARAM_"$ZONE_":-"$ZSK_PARAM"}
	eval _DS_PARAM=\${DS_PARAM_"$ZONE_":-"$DS_PARAM"}

	if [ ! -s "$KSK_CUR_FILE" ]; then
		Fatal "Zone does not exist"
	fi

        LOCKF="$DBDIR/$ZONE.lock"
	echo "LOCK$$" > "$TMPF"
	LOCKSTR=$(cat "$TMPF")
	if [ ! -f "$TMPF" ] || [ "LOCK$$" != "$LOCKSTR" ]; then
		Fatal "Cannot write lock file $TMPF"
	fi
	if ln "$TMPF" "$LOCKF"; then
		:
	else
		rm "$TMPF"
		echo "zone $ZONE locked"
		continue
	fi
	rm "$TMPF"

	case $CMD in
	keygen)
		_check_nofile "$KSK_CUR_FILE" "$ZSK_CUR_FILE"
		keygen "$_KSK_PARAM" "$ZONE" "$KSK_CUR_FILE"
		keygen "$_ZSK_PARAM" "$ZONE" "$ZSK_CUR_FILE"
		echo "New keys created"
		status
		;;
	rmkeys)

		backupkeys "$KSK_CUR_FILE" "$ZSK_CUR_FILE" "$KSK_NEW_FILE" "$ZSK_NEW_FILE"
		rm "$KSK_CUR_FILE" "$ZSK_CUR_FILE" "$KSK_NEW_FILE" "$ZSK_NEW_FILE"
		echo "Removed all keys"
		status
		;;
	ksk-add)
		_check_nofile "$KSK_NEW_FILE"
		keygen "$_KSK_PARAM" "$ZONE" "$KSK_NEW_FILE"
		echo "Added new KSK"
		status
		;;
	ksk-roll)
		_check_file "$ZONEFILE" "$KSK_CUR_FILE" "$KSK_NEW_FILE"
		KSK=$(head -1 "$KSK_CUR_FILE")
		KSS=$(head -1 "$KSK_NEW_FILE")
		_check_file "$KEYDIR/$KSK.key" "$KEYDIR/$KSS.key" "$KEYDIR/$KSK.private" "$KEYDIR/$KSS.private"
		mv "$KEYDIR/$KSK.key" "$KEYDIR/$KSK.private" "$KEYBACKUPDIR/"
		mv "$KSK_NEW_FILE" "$KSK_CUR_FILE"
		OLDKSK="$KSK"
		KSK="$KSS"
		KSS=""
		echo "Removed old KSK"
		status
		;;
	zsk-add)
		_check_nofile "$ZSK_NEW_FILE"
		keygen "$_ZSK_PARAM" "$ZONE" "$ZSK_NEW_FILE"
		echo "New ZSK created"
		status
		;;
	zsk-roll)
		_check_file "$ZONEFILE" "$ZSK_CUR_FILE" "$ZSK_NEW_FILE"
		ZSK=$(head -1 "$ZSK_CUR_FILE")
		ZSS=$(head -1 "$ZSK_NEW_FILE")
		_check_file "$KEYDIR/$ZSK.key" "$KEYDIR/$ZSS.key" "$KEYDIR/$ZSK.private" "$KEYDIR/$ZSS.private"
		backupkeys "$ZSK_OLD_FILE"
		mv "$ZSK_OLD_FILE" "$KEYBACKUPDIR/removed-ZSK-$NOW-$ZONE"
		mv "$ZSK_CUR_FILE" "$ZSK_OLD_FILE"
		mv "$ZSK_NEW_FILE" "$ZSK_CUR_FILE"
		OLDZSK="$ZSK"
		ZSK="$ZSS"
		ZSS=""
		echo "Rolled ZSK - active set to old & new set to active"
		status
		;;
	zsk-rmold)
		_check_file "$ZSK_OLD_FILE"
		backupkeys "$ZSK_OLD_FILE"
		mv "$ZSK_OLD_FILE" "$KEYBACKUPDIR/removed-ZSK-$NOW-$ZONE"
		echo "Removed old ZSK"
		status
		;;
	status)
		status
		;;
	sign|-s|--sign)
		sign
		SIGN_OPT=0
		;;
	*)
		echo "unknown command: $CMD"
		_usage
		;;
	esac

	if [ "$SIGN_OPT" = 1 ]; then
		sleep 5
		sign
	fi
	rm "$LOCKF"
done

exit 0
